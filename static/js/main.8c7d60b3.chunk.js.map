{"version":3,"sources":["InfoBox.js","LineGraph.js","Table.js","util.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","Danger","active","props","Card","onClick","className","CardContent","Typography","color","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","casesType","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","Table","countries","map","country","casesTypeColors","hex","multiplier","recovered","deaths","sortData","sortedData","sort","b","prettyPrintStat","stat","Map","center","zoom","TileLayer","url","attribution","Circle","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","Fragment","src","alt","width","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","component","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8c7d60b3.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Card,CardContent,Typography} from \"@material-ui/core\"\r\nimport \"./InfoBox.css\"\r\nfunction InfoBox({title,cases,total,Danger,active,...props}) {\r\n    return (\r\n        <Card \r\n         onClick={props.onClick}\r\n        className={`infoBox ${active && \"infoBox--selected\"}`}\r\n        > \r\n            <CardContent>\r\n                {/*Title Covid19 cases */}\r\n                <Typography className=\"title\" color=\"textPrimary\">{title}</Typography>\r\n                {/*Number of cases  for today*/}\r\n                <h2 className={`cases ${!Danger && \"infoBox__cases--green\"}`} >Today {cases}</h2>\r\n                {/*total */}\r\n                <Typography className=\"total\" color=\"textPrimary\">Total {total} </Typography>\r\n\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React,{useState,useEffect} from 'react'\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0,\r\n      },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n      callbacks: {\r\n        label: function (tooltipItem, data) {\r\n          return numeral(tooltipItem.value).format(\"+0,0\");\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          type: \"time\",\r\n          time: {\r\n            format: \"MM/DD/YY\",\r\n            tooltipFormat: \"ll\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            // Include a dollar sign in the ticks\r\n            callback: function (value, index, values) {\r\n              return numeral(value).format(\"0a\");\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  const buildChartData =(data,casesType=\"cases\")=>{\r\n      const chartData = [];\r\n      let lastDataPoint;\r\n      for (let date in data.cases) {\r\n          if(lastDataPoint) {\r\n              let newDataPoint = {\r\n                  x: date,\r\n                  y: data[casesType][date] - lastDataPoint,\r\n              } ;\r\n              chartData.push(newDataPoint) ;  \r\n          }\r\n          lastDataPoint= data[casesType][date];\r\n      };\r\n      return chartData;\r\n  };\r\nfunction LineGraph({ casesType }) {\r\n  const [data, setData] = useState({});\r\n\r\n\r\n    useEffect( ()=>{\r\n        const fetchData = async () => {\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n              .then((response) => response.json())\r\n              .then((data) => {\r\n                let chartData=buildChartData(data,casesType)\r\n                setData(chartData)\r\n              });\r\n          };\r\n      \r\n          fetchData();\r\n        },[casesType]);\r\n       \r\n    return (\r\n        <div>\r\n            {data?.length > 0 && (\r\n           <Line \r\n            data={{\r\n                datasets: [{\r\n                backgroundColor: \"rgba(131,0,0,0.5)\",\r\n                borderColor: \"#830000\",\r\n                data: data,},],}}   \r\n            options={options}/>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React from 'react'\r\nimport numeral from \"numeral\"\r\nimport \"./Table.css\"\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country,cases}) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>\r\n                        {numeral(cases).format(\"0.0a\")}\r\n                        </strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#ff0000\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#3eee2e\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#333333\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\nexport const sortData = (data) =>{\r\n    const sortedData=[...data];\r\n    sortedData.sort( (a,b)=> (a.cases>b.cases)?-1:1 );\r\n    return sortedData;\r\n};\r\n\r\n//Draw circles on the map with interactive tooltips\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n    <div className=\"popContainer\">\r\n    <div\r\n            className=\"flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"Name\"><b>{country.country}</b></div>\r\n          <div className=\"Confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"Recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"Deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n    </div>       \r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n  export const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport {showDataOnMap} from \"./util\"\r\nfunction Map({countries,casesType,center,zoom}) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {/* loop countries and draw circles*/}\r\n        {showDataOnMap(countries,casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData ,prettyPrintStat} from \"./util\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\nimport {Typography} from '@material-ui/core';\n\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <React.Fragment>\n    <div className=\"app\">\n      <div className=\"Left\">\n        <div className=\"header\">\n          <h1>COVID-19 Tracker</h1>\n          <img src=\"bande.png\"alt=\"\" width=\"20%\"/>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            active={casesType===\"cases\"}\n            Danger\n            onClick={e=>setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases) }\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            active={casesType===\"recovered\"}\n            onClick={e=>setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n         <InfoBox\n            active={casesType===\"deaths\"}\n            Danger\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}/>\n        </div>\n       \n\n        <div className=\"Right\">\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n        </div>\n      </div>\n      <Card className=\"Right\">\n        <CardContent>\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n    <div className=\"footer\">\n    <Typography variant=\"body1\" component=\"h2\">\n      Created by \n      <a className=\"link\" href=\"https://www.linkedin.com/in/malek-ammar-924551148/\" target=\"_blank\" rel=\"noopener noreferrer\"> Malek Ammar</a>\n    </Typography>\n    </div>\n    <div className=\"footer\">\n    <Typography variant=\"body1\" component=\"h2\">\n      In collaboration with\n    </Typography>\n    </div>\n   <div className=\"footer\">\n     <a href=\"https://www.facebook.com/IAS.ENIT\"><img src=\"iaswhte.png\" alt=\"\" width=\"20%\"/></a>\n     <a href=\"https://www.facebook.com/ieee.enit.sb\"><img src=\"IEEESb.png\" alt=\"\" width=\"20%\"/></a>\n   </div>\n   </React.Fragment>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}